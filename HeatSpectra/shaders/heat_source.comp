#version 450
layout(local_size_x = 256) in;

// Source data: positions+temps
struct HeatSourceVertex {
    vec3 position;
    vec3 color;      // not used for final in-place color
    float temperature;
};

// Destination data: positions+colors
struct SurfaceVertex {
    vec3 position;
    vec3 color;
};

// layout(std430) or std140 is fine, but ensure matching alignment in your C++ structs
layout(std430, binding = 0) buffer SourceBuffer {
    HeatSourceVertex srcVertices[];
} sourceBuffer;

layout(std430, binding = 1) buffer SurfaceBuffer {
    SurfaceVertex outVertices[];
} surfaceBuffer;

vec3 temperatureToColor(float t) {
    // ~ Same gradient function as before
    if (t <= 0.0) return vec3(0, 0, 0);
    else if (t < 0.25)  return mix(vec3(0, 0, 0), vec3(0.1, 0.0, 0.6), t * 4.0);
    else if (t < 0.375) return mix(vec3(0.1, 0.0, 0.6), vec3(0.3, 0.0, 0.5), (t - 0.25) * 8.0);
    else if (t < 0.55)  return mix(vec3(0.3, 0.0, 0.5), vec3(0.9, 0.0, 0.0), (t - 0.375) * 5.71);
    else if (t < 0.75)  return mix(vec3(0.9, 0.0, 0.0), vec3(0.9, 0.6, 0.0), (t - 0.55) * 5.0);
    else if (t < 0.9)   return mix(vec3(0.9, 0.6, 0.0), vec3(1.0, 1.0, 0.3), (t - 0.75) * 6.67);
    else                return mix(vec3(1.0, 1.0, 0.3), vec3(1.0, 1.0, 1.0), (t - 0.9) * 10.0);
}

void main() {
    uint idx = gl_GlobalInvocationID.x;
    if (idx >= sourceBuffer.srcVertices.length() ||
        idx >= surfaceBuffer.outVertices.length()) return;

    float temperatureScale = 10.0;
    float temp = sourceBuffer.srcVertices[idx].temperature;
    float normalized = clamp(temp / temperatureScale, 0.0, 1.0);

    // Write result to surfaceBuffer
    //surfaceBuffer.outVertices[idx].position = sourceBuffer.srcVertices[idx].position;
    surfaceBuffer.outVertices[idx].color = temperatureToColor(normalized);
}