#version 450
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 256) in;

struct TetraElement {
    uint vertices[4];
    float temperature;
    float volume;
    float density;
    float specificHeat;
    float conductivity;
    float coolingRate;
};

struct HeatSourceVertex {
    vec4 position;
    float temperature;
};

layout(binding = 0) buffer TetraBuffer {
    TetraElement elements[];
} tetraBuffer;

layout(binding = 1) buffer TemperatureWriteBuffer {
    float temperatures[];
} temperatureWriteBuffer;

layout(binding = 2) buffer TemperatureReadBuffer {
    float temperatures[];
} temperatureReadBuffer;

layout(binding = 3) buffer NeighborBuffer {
    int neighbors[];
} neighborBuffer;

layout(binding = 4) buffer CenterBuffer {
    vec4 centers[];
} centerBuffer;

layout(binding = 5) uniform TimeBuffer {
    float deltaTime;
    float totalTime;
} timeBuffer;

layout(binding = 6) buffer HeatSourceBuffer {
    HeatSourceVertex heatSources[];
} heatSourceBuffer;

layout(push_constant) uniform PushConstantBlock {
    mat4 heatSourceModelMatrix;
} pushConstants;


void main() {
    uint tetraID = gl_GlobalInvocationID.x;
    if (tetraID >= tetraBuffer.elements.length()) return;

    // Read tetrahedron data
    TetraElement tetra = tetraBuffer.elements[tetraID];
    float temperature = temperatureReadBuffer.temperatures[tetraID];
    vec3 center = centerBuffer.centers[tetraID].xyz;
    
    // ---------- Heat Source Contribution ----------
    const float HEAT_RADIUS = 0.012;
    float heatGeneration = 0.0; // q'' term
    float maxSourceTemp = 0.0;
    
    for (uint i = 0; i < heatSourceBuffer.heatSources.length(); i++) {
        vec4 transformedPos = pushConstants.heatSourceModelMatrix * heatSourceBuffer.heatSources[i].position;
        vec3 heatPos = transformedPos.xyz;
        float heatTemp = heatSourceBuffer.heatSources[i].temperature;
        maxSourceTemp = max(maxSourceTemp, heatTemp);
        
        float dist = distance(center, heatPos);
        if (dist < HEAT_RADIUS) {
            float intensity = (1.0 - dist / HEAT_RADIUS) * heatTemp;
            heatGeneration += intensity * timeBuffer.deltaTime * 0.25;
        }
    }
    
    // ---------- Conduction Term ----------
    float conductionTerm = 0.0;
    int baseIndex = int(tetraID) * 5;
    int neighborCount = neighborBuffer.neighbors[baseIndex];
    
    for (int i = 0; i < neighborCount; ++i) {
        int neighborIdx = neighborBuffer.neighbors[baseIndex + 1 + i];
        if (neighborIdx < 0 || neighborIdx >= tetraBuffer.elements.length()) 
        continue;
        
        // Read neighbor temperature and properties
        float neighborTemp = temperatureReadBuffer.temperatures[neighborIdx];
        TetraElement neighborTetra = tetraBuffer.elements[neighborIdx];
        
        float avgVolume = (tetra.volume + neighborTetra.volume) * 0.5;
        float sharedArea = pow(avgVolume, 2.0/3.0) * 0.5;
        
        // Distance between centers
        float centerDistance = distance(center, centerBuffer.centers[neighborIdx].xyz);
        if (centerDistance < 0.001) 
        centerDistance = 0.001;
        
        // Average conductivity 
        float k_avg = (tetra.conductivity + neighborTetra.conductivity) * 0.5;
        
        // Heat flux through shared face: -k * (dT/dx) * A
        // Where dT/dx is approximated as (neighborTemp - temperature) / centerDistance
        float heatFlux = k_avg * (neighborTemp - temperature) / centerDistance * sharedArea;
        
        // Add to conduction term
        conductionTerm += heatFlux;
    }
    
    // ---------- Complete Heat Equation Implementation ----------
    
    float thermalMass = tetra.density * tetra.specificHeat * tetra.volume;

    // Ensure minimum thermal mass to avoid instability
    thermalMass = max(thermalMass, 0.001); 
    
    // Temperature change rate: (conductionTerm + heatGeneration) / thermalMass
    float temperatureChangeRate = (conductionTerm + heatGeneration) / thermalMass;
    
    // Limit the maximum temperature change per step for stability
    float maxTempChange = 10.0;
    temperatureChangeRate = clamp(temperatureChangeRate, -maxTempChange, maxTempChange);

    // Update temperature using explicit time integration
    temperature += temperatureChangeRate * timeBuffer.deltaTime;

    // Ambient cooling (reduce the cooling rate)
    temperature *= (1.0 - tetra.coolingRate * 0.1 * timeBuffer.deltaTime);

    // Ensure temperature stays positive
    temperature = max(temperature, 0.0);
    
    // Write updated temperature
    temperatureWriteBuffer.temperatures[tetraID] = temperature;
}