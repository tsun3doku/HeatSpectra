#version 450
#extension GL_EXT_debug_printf : enable

layout(local_size_x = 256) in;

struct TetraElement {
    uint vertices[4];
    float temperature;
    float coolingRate;
    float thermalConductivity;
};

struct HeatSourceVertex {
    // Position + temperature (stored by your heat source model)
    vec3 position;
    float temperature;
};

// Existing buffers
layout(binding = 0) buffer TetraBuffer {
    TetraElement elements[];
} tetraBuffer;

layout(binding = 1) buffer TemperatureWriteBuffer {
    float temperatures[];
} temperatureWriteBuffer;

layout(binding = 2) buffer TemperatureReadBuffer {
    float temperatures[];
} temperatureReadBuffer;

layout(binding = 3) buffer NeighborBuffer {
    int neighbors[];
} neighborBuffer;

layout(binding = 4) buffer CenterBuffer {
    vec4 centers[];
} centerBuffer;

layout(binding = 5) uniform TimeBuffer {
    float deltaTime;
    float totalTime;
} timeBuffer;

layout(binding = 6) buffer HeatSourceBuffer {
    HeatSourceVertex heatSources[];
} heatSourceBuffer;

layout(push_constant) uniform PushConstantBlock {
    mat4 heatSourceModelMatrix;
} pushConstants;


void main() {
    uint tetraID = gl_GlobalInvocationID.x;
    if (tetraID >= tetraBuffer.elements.length()) return;

    // Read tetrahedron data and previous temperature
    TetraElement tetra = tetraBuffer.elements[tetraID];
    float temperature = temperatureReadBuffer.temperatures[tetraID];
    vec3 center = centerBuffer.centers[tetraID].xyz;

    const float HEAT_RADIUS = 0.012;
    float heatAccumulation = 0.0;
    float maxSourceTemp = 0.0;

    for (uint i = 0; i < heatSourceBuffer.heatSources.length(); i++) {
        vec4 transformedPos = pushConstants.heatSourceModelMatrix * vec4(heatSourceBuffer.heatSources[i].position, 1.0);
        vec3 heatPos = transformedPos.xyz;
        float heatTemp = heatSourceBuffer.heatSources[i].temperature;
        maxSourceTemp = max(maxSourceTemp, heatTemp);
        float dist = distance(center, heatPos);

        if (dist < HEAT_RADIUS) {
            float intensity = (1.0 - dist / HEAT_RADIUS) * heatTemp;
            // The multiplication by 0.25 and deltaTime scales the influence
            heatAccumulation += min(intensity * timeBuffer.deltaTime * 0.25, maxSourceTemp);
        }
    }
    temperature += heatAccumulation;
    temperature = min(temperature, maxSourceTemp);

    float totalHeatTransfer = 0.0;
    int baseIndex = int(tetraID) * 5;
    int neighborCount = neighborBuffer.neighbors[baseIndex];

    for (int i = 0; i < neighborCount; ++i) {
        int t = neighborBuffer.neighbors[baseIndex + 1 + i];
        if (t < 0 || t >= tetraBuffer.elements.length()) continue;
        
        // Read neighbor temperature
        float neighborTemp = temperatureReadBuffer.temperatures[t];
        // Average conductivity of the two tetrahedra
        float k_avg = (tetra.thermalConductivity + tetraBuffer.elements[t].thermalConductivity) * 0.5;
        
        float transfer = k_avg * (neighborTemp - temperature) * timeBuffer.deltaTime;
        totalHeatTransfer += transfer;
    }
    // Update temperature with the net conduction transfer
    temperature += totalHeatTransfer;

    // Cooling  
    temperature *= (1.0 - tetra.coolingRate * timeBuffer.deltaTime);

    // Write updated temperature to the output buffer   
    temperatureWriteBuffer.temperatures[tetraID] = max(temperature, 0.0);
}