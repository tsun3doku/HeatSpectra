#version 450
layout(local_size_x = 256) in;

struct SurfaceVertex {
    vec4 position;
    vec4 color;
};

struct TetraElement {
    uint vertices[4];
    float temperature;
    float coolingRate;        
    float thermalConductivity;
};

layout(binding = 0) buffer TemperatureReadBuffer {
    float temperatures[];
} temperatureReadBuffer;

layout(binding = 1) buffer SurfaceBuffer {
    SurfaceVertex vertices[];
} surfaceBuffer;

layout(binding = 2) buffer CenterBuffer {
    vec4 centers[];
} centerBuffer;

layout(push_constant) uniform PushConstantBlock {
    vec3 modelOffset;  // Translation offset for vismodel
} pushConstants;

vec3 temperatureToColor(float t) {
    // t should be normalized between 0 and 1
    if (t <= 0.0) return vec3(0, 0, 0);                                                          // Black for coldest
    else if (t < 0.25) return mix(vec3(0, 0, 0), vec3(0.1, 0.0, 0.6), t * 4.0);                  // Black to blue
    else if (t < 0.375) return mix(vec3(0.1, 0.0, 0.6), vec3(0.3, 0.0, 0.5), (t - 0.25) * 8.0);  // Blue to violet 
    else if (t < 0.55) return mix(vec3(0.3, 0.0, 0.5), vec3(0.9, 0.0, 0.0), (t - 0.375) * 5.71); // Violet to red 
    else if (t < 0.75) return mix(vec3(0.9, 0.0, 0.0), vec3(0.9, 0.6, 0.0), (t - 0.55) * 5.0);   // Red to orange
    else if (t < 0.9) return mix(vec3(0.9, 0.6, 0.0), vec3(1.0, 1.0, 0.3), (t - 0.75) * 6.67);   // Orange to yellow
    else return mix(vec3(1.0, 1.0, 0.3), vec3(1.0, 1.0, 1.0), (t - 0.9) * 10.0);                 // Yellow to white
}
void main() {
    uint vertexID = gl_GlobalInvocationID.x;
    if (vertexID >= surfaceBuffer.vertices.length()) return;

    vec3 vertPos = surfaceBuffer.vertices[vertexID].position.xyz;
    
    // Track N closest centers
    const int N = 4;
    float closestDists[N];
    float closestTemps[N];
    
    // Initialize arrays
    for(int i = 0; i < N; i++) {
        closestDists[i] = 1000.0;
        closestTemps[i] = 0.0;
    }

    // Find N closest centers
    for(uint t = 0; t < centerBuffer.centers.length(); t++) {
        vec3 tetraCenter = centerBuffer.centers[t].xyz + pushConstants.modelOffset;  // Apply translation
        float dist = distance(vertPos, tetraCenter);
        
        // Insert into sorted arrays
        for(int i = 0; i < N; i++) {
            if(dist < closestDists[i]) {
                // Shift existing entries
                for(int j = N-1; j > i; j--) {
                    closestDists[j] = closestDists[j-1];
                    closestTemps[j] = closestTemps[j-1];
                }
                closestDists[i] = dist;
                closestTemps[i] = temperatureReadBuffer.temperatures[t];
                break;
            }
        }
    }

    // Calculate weighted temperature using inverse distance weighting
    float weightedTemp = 0.0;
    float totalWeight = 0.0;
    
    for(int i = 0; i < N; i++) {
        float weight = 1.0 / (closestDists[i] * closestDists[i]);
        weightedTemp += closestTemps[i] * weight;
        totalWeight += weight;
    }
    
    float finalTemp = weightedTemp / totalWeight;
    float temperatureScale = 50.0f;

    float normalized = clamp(finalTemp / temperatureScale, 0.0, 1.0);
    surfaceBuffer.vertices[vertexID].color = vec4(temperatureToColor(normalized), 1.0);
}
